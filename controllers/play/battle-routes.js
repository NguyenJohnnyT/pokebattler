const router=require("express").Router(),{User,Pokemon,Game,Level,Monster}=require("../../models");router.get("/",async(a,b)=>{console.log("req.session",a.session);try{const c=await User.findOne({where:{id:a.session.user_id},include:[{model:Pokemon,where:{is_current:!0}},{model:Game,where:{isCurrent:!0},include:[{model:Level,include:[{model:Monster,where:{is_dead:!1}}]}]}]}),d=c.get({plain:!0}),e=d.pokemons[0],f=d.games[0].levels[0],g=f.monsters[0];console.log("level",{post:d,pokemon:e,level:f,monster:g}),b.status(200).render("game_battle",{post:d,pokemon:e,level:f,monster:g})}catch(a){console.log(a)}}),router.get("/pokemons/:id",async(a,b)=>{try{const c=await Pokemon.findByPk(a.params.id);post=c.get({plain:!0}),b.status(200).json(post)}catch(a){b.status(500).json(a)}}),router.put("/monsters/:id",async(a,b)=>{try{const c=await Monster.update({hitpoints:a.body.hitpoints,is_dead:a.body.is_dead},{where:{id:a.params.id}});b.status(200).json(c)}catch(a){b.status(500).json(a)}}),router.put("/pokemons/:id",async(a,b)=>{try{const c=await Pokemon.update({hitpoints:a.body.hitpoints,is_dead:a.body.is_dead},{where:{id:a.params.id}});b.status(200).json(c)}catch(a){b.status(500).json(a)}}),router.put("/levels/:id",async(a,b)=>{try{await Level.update({monsterTurn:a.body.monsterTurn},{where:{id:a.params.id}});b.status(200).render("game_battle")}catch(a){b.status(500).json(a)}}),router.put("/levels_monster/:id",async(a,b)=>{try{const c=await Level.update({monster_left:a.body.monster_left},{where:{id:a.params.id}});b.status(200).json(c)}catch(a){b.status(500).json(a)}}),module.exports=router;